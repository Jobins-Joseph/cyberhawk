import 'dart:async';

import 'package:first_project/model/loginmode.dart';
import 'package:first_project/model/signinmodel.dart';
import 'package:flutter_bloc/flutter_bloc.dart';


import '../repositories/repositories.dart';

class LoginBloc extends Bloc<LoginEvents, LoginStates> {
  LoginBloc() : super(LoginInitial()) {
    on<VerifyPassword>(verifyPassword);
  }

  Future<FutureOr<void>> verifyPassword(
      VerifyPassword event, Emitter<LoginStates> emit) async {

    emit(Loader());


    Autogenerated autogenerated;

    Map map = {"phone": event.username, "password": event.password};
    print(map);
    autogenerated=await Repository().checkPhoneNumber(url:"/user/login",data:map);

    if(autogenerated.status==true){
      emit(LoginSuccess());
      emit(Fetching());

    }
    else if(autogenerated.status==false){
      emit(LoginError(error: autogenerated.msg));
    }
  }
}

class LoginEvents {}

class VerifyPassword extends LoginEvents {
  final String? username, password;

  VerifyPassword({this.username, this.password});
}

class LoginStates {}

class LoginInitial extends LoginStates {}

class Loader extends LoginStates {}

class LoginSuccess extends LoginStates {}
class Fetching extends LoginStates {}
class LoginError extends LoginStates {
  final String? error;

  LoginError({this.error});
}